generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  userId    String     @unique
  email     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  booking   Booking[]
  buyer     Buyer?
  flat      Flat[]
  seller    Seller?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  contactNumber String
  profilePhoto  String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Seller {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  bio           String?
  profession    String
  contactNumber String
  address       String
  gender        GenderStatus
  profilePhoto  String?
  averageRating Float        @default(0.0)
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  review        Review[]
  user          User         @relation(fields: [email], references: [email])

  @@map("sellers")
}

model Buyer {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  bio           String?
  profession    String
  contactNumber String
  address       String
  gender        GenderStatus
  profilePhoto  String?
  averageRating Float        @default(0.0)
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [email], references: [email])
  review        Review[]

  @@map("buyers")
}

model Flat {
  id                   String    @id @default(uuid())
  flatNo               String    @unique
  flatName             String    @unique
  email                String
  squareFeet           Int
  totalBedrooms        Int
  totalRooms           Int
  utilitiesDescription String
  location             String
  description          String
  amenities            String
  rent                 Int
  advanceAmount        Int
  availability         Boolean   @default(true)
  viewFlat             Int       @default(0)
  flatPhoto            String?
  isDeleted            Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  booking              Booking[]
  user                 User      @relation(fields: [email], references: [email])
  review               Review?

  @@map("flats")
}

model Booking {
  id            String        @id @default(uuid())
  flatId        String
  email         String
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payment       Payment?
  user          User          @relation(fields: [email], references: [email])
  flat          Flat          @relation(fields: [flatId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  buyerId   String
  sellerId  String
  flatId    String   @unique
  rating    Float
  comment   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  flat      Flat     @relation(fields: [flatId], references: [id])
  seller    Seller   @relation(fields: [sellerId], references: [id])

  @@map("reviews")
}

model Payment {
  id                String        @id @default(uuid())
  bookingId         String        @unique
  amount            Float
  transactionId     String        @unique
  payStatus         PaymentStatus @default(UNPAID)
  paymentGetwayData Json?
  isDeleted         Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  booking           Booking       @relation(fields: [bookingId], references: [id])
}

enum BookingStatus {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  BUYER
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum GenderStatus {
  MALE
  FEMALE
}

enum PaymentStatus {
  PAID
  UNPAID
}
