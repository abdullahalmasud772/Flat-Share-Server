// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  role        UserRole
  status      UserStatus   @default(ACTIVE)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  booking     Booking[]
  flat        Flat[]
  userProfile UserProfile?

  @@map("users")
}

model UserProfile {
  id            String       @id @default(uuid())
  userId        String       @unique
  email         String       @unique
  name          String
  bio           String?
  profession    String
  address       String
  contactNumber Int
  gender        GenderStatus
  profilePhoto  String?
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

model Flat {
  id                   String    @id @default(uuid())
  flatName             String    @unique
  userId               String
  squareFeet           Int
  totalBedrooms        Int
  totalRooms           Int
  utilitiesDescription String
  location             String
  description          String
  amenities            String
  rent                 Int
  advanceAmount        Int
  availability         Boolean   @default(true)
  flatPhoto            String?
  isDeleted            Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])
  booking              Booking[]

  @@map("flats")
}

model Booking {
  id        String        @id @default(uuid())
  flatId    String
  userId    String
  status    BookingStatus @default(PENDING)
  isDeleted Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  flat      Flat          @relation(fields: [flatId], references: [id])

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  BUYER
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum GenderStatus {
  MALE
  FEMALE
}
